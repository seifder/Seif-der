#include <WiFi.h>
#include <PubSubClient.h>
#include "DHT.h"

// ---- Configuration Wi-Fi ----
const char* ssid = "GL-AR300M-519-Guest";
const char* password = "goodgood";

// ---- Configuration MQTT ----
const char* mqttServer = "192.168.9.240";
const int mqttPort = 1883;
const char* mqttUser = "";
const char* mqttPassword = "";
const char* topicPublish = "P1_DHT";
const char* topicSubscribe = "P1_DHTF"; // Control topic
const char* topicSeuilFroid = "P1_SeuilFroid"; // Cold threshold topic
const char* topicSeuilChaud = "P1_SeuilChaud"; // Hot threshold topic

// ---- Définition des broches ----
#define DHTPIN1 32
#define DHTPIN2 33
#define DHTTYPE DHT11
#define LED 2
#define RELAY1 25
#define RELAY2 26

// ---- Variables globales ----
DHT dht1(DHTPIN1, DHTTYPE);
DHT dht2(DHTPIN2, DHTTYPE);

WiFiClient espClient;
PubSubClient client(espClient);

unsigned long previousMillis = 0;
const long interval = 60000; // Intervalle de publication en ms

// Threshold values
float seuilFroid = NAN; // Not set initially
float seuilChaud = NAN; // Not set initially

// ---- Connexion au Wi-Fi ----
void setupWiFi() {
  Serial.print("Connexion au Wi-Fi");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nConnecté au Wi-Fi");
}

// ---- Callback MQTT ----
void callback(char* topic, byte* payload, unsigned int length) {
  String message = "";
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.print("Message reçu [");
  Serial.print(topic);
  Serial.print("]: ");
  Serial.println(message);

  // Update thresholds based on MQTT messages
  if (String(topic) == topicSeuilFroid) {
    seuilFroid = message.toFloat();
    Serial.print("Nouveau seuil froid: ");
    Serial.println(seuilFroid);
  } else if (String(topic) == topicSeuilChaud) {
    seuilChaud = message.toFloat();
    Serial.print("Nouveau seuil chaud: ");
    Serial.println(seuilChaud);
  }

  // Handle relay control commands
  else if (String(topic) == topicSubscribe) {
    if (message == "fan_on") {
      digitalWrite(RELAY1, LOW); // Activate fan
      Serial.println("Ventilateur activé");
    } else if (message == "fan_off") {
      digitalWrite(RELAY1, HIGH); // Deactivate fan
      Serial.println("Ventilateur désactivé");
    } else if (message == "dryer_on") {
      digitalWrite(RELAY2, LOW); // Activate dryer
      Serial.println("Séchoir activé");
    } else if (message == "dryer_off") {
      digitalWrite(RELAY2, HIGH); // Deactivate dryer
      Serial.println("Séchoir désactivé");
    }
  }
}

// ---- Configuration initiale ----
void setup() {
  Serial.begin(115200);

  pinMode(LED, OUTPUT);
  pinMode(RELAY1, OUTPUT);
  pinMode(RELAY2, OUTPUT);

  digitalWrite(RELAY1, HIGH); // Désactiver relais au démarrage
  digitalWrite(RELAY2, HIGH);

  setupWiFi();

  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);

  dht1.begin();
  dht2.begin();
}

// ---- Reconnexion MQTT ----
void reconnect() {
  while (!client.connected()) {
    Serial.print("Connexion au broker MQTT...");
    if (client.connect("ESP32Client", mqttUser, mqttPassword)) {
      Serial.println("Connecté");
      client.subscribe(topicSubscribe);   // Control topic
      client.subscribe(topicSeuilFroid); // Cold threshold topic
      client.subscribe(topicSeuilChaud); // Hot threshold topic
    } else {
      Serial.print("Échec, rc=");
      Serial.print(client.state());
      Serial.println(" nouvelle tentative dans 5s");
      delay(5000);
    }
  }
}

// ---- Boucle principale ----
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    // Lecture des capteurs
    float temp1 = dht1.readTemperature();
    float temp2 = dht2.readTemperature();
    float avgTemp = (temp1 + temp2) / 2;

    float hum1 = dht1.readHumidity();
    float hum2 = dht2.readHumidity();
    float avgHum = (hum1 + hum2) / 2;

    // Vérification des données
    if (isnan(avgTemp) || isnan(avgHum)) {
      Serial.println("Erreur de lecture des capteurs !");
      return;
    }

    // Publication MQTT
    String payload = "{\"temperature\":" + String(avgTemp) + ",\"humidity\":" + String(avgHum) + "}";
    client.publish(topicPublish, payload.c_str());
    Serial.println("Données publiées : " + payload);

    // Ensure thresholds are set before controlling the relays
    if (isnan(seuilFroid) || isnan(seuilChaud)) {
      Serial.println("Seuils non définis. Attente des seuils...");
      return;
    }

    // Control fan based on hot threshold
    if (avgTemp >= seuilChaud) {
      digitalWrite(RELAY1, LOW); // Activate fan
      Serial.println("Ventilateur activé (seuil froid atteint)");
    } else {
      digitalWrite(RELAY1, HIGH); // Deactivate fan
      Serial.println("Ventilateur désactivé");
    }

    // Control dryer based on cold threshold
    if (avgTemp >= seuilFroid) {
      digitalWrite(RELAY2, LOW); // Activate dryer
      Serial.println("Séchoir activé (seuil chaud atteint)");
    } else {
      digitalWrite(RELAY2, HIGH); // Deactivate dryer
      Serial.println("Séchoir désactivé");
    }

    // Blink LED indicator
    digitalWrite(LED, HIGH);
    delay(100);
    digitalWrite(LED, LOW);
  }
}
